Script started on Thu 08 May 2014 12:45:58 AM PDT
You are currently using 32% (156.5 MiB) of your 488.3 MiB quota.
[bambriz@unix1 lab5]$ mk unit[Knit.c
CSOURCE=uninit.c EXECBIN=uninit
+ cid + uninit.c
+ checksource uninit.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit -lm
uninit.c: In function â€˜mainâ€™:
uninit.c:6:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
uninit.c:6:28: warning: unused parameter â€˜argvâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
                            ^
uninit.c:8:11: warning: â€˜fooâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("%d\n", foo);
           ^
uninit.c:10:11: warning: â€˜pointerâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("%d\n", *pointer);
           ^
+ set +x
============================================================
[bambriz@unix1 lab5]$ valgrind uninit.c[K[K 
==31301== Memcheck, a memory error detector
==31301== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==31301== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==31301== Command: uninit
==31301== 
==31301== Use of uninitialised value of size 8
==31301==    at 0x38B3643D9B: _itoa_word (_itoa.c:195)
==31301==    by 0x38B3646952: vfprintf (vfprintf.c:1640)
==31301==    by 0x38B364F489: printf (printf.c:35)
==31301==    by 0x400542: main (uninit.c:8)
==31301== 
==31301== Conditional jump or move depends on uninitialised value(s)
==31301==    at 0x38B3643DA5: _itoa_word (_itoa.c:195)
==31301==    by 0x38B3646952: vfprintf (vfprintf.c:1640)
==31301==    by 0x38B364F489: printf (printf.c:35)
==31301==    by 0x400542: main (uninit.c:8)
==31301== 
==31301== Conditional jump or move depends on uninitialised value(s)
==31301==    at 0x38B36453E3: vfprintf (vfprintf.c:1640)
==31301==    by 0x38B364F489: printf (printf.c:35)
==31301==    by 0x400542: main (uninit.c:8)
==31301== 
==31301== Conditional jump or move depends on uninitialised value(s)
==31301==    at 0x38B3645401: vfprintf (vfprintf.c:1640)
==31301==    by 0x38B364F489: printf (printf.c:35)
==31301==    by 0x400542: main (uninit.c:8)
==31301== 
0
==31301== Use of uninitialised value of size 8
==31301==    at 0x400547: main (uninit.c:10)
==31301== 
1
==31301== 
==31301== HEAP SUMMARY:
==31301==     in use at exit: 0 bytes in 0 blocks
==31301==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==31301== 
==31301== All heap blocks were freed -- no leaks are possible
==31301== 
==31301== For counts of detected and suppressed errors, rerun with: -v
==31301== Use --track-origins=yes to see where uninitialised values come from
==31301== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 6 from 6)
[bambriz@unix1 lab5]$ echo $?
0
[bambriz@unix1 lab5]$ bash[K[K[K[Kpstatus 139
pstatus: 0x008B TERMINATED 11: Segmentation fault (core dumped)
[bambriz@unix1 lab5]$ exit
exit

Script done on Thu 08 May 2014 12:47:26 AM PDT
